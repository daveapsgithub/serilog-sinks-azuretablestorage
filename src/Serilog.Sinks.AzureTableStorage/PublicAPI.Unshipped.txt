const Serilog.LoggerConfigurationAzureTableStorageExtensions.DefaultBatchPostingLimit = 50 -> int
const Serilog.LoggerConfigurationAzureTableStorageWithPropertiesExtensions.DefaultBatchPostingLimit = 50 -> int
override Serilog.Sinks.AzureTableStorage.AzureBatchingTableStorageSink.EmitBatchAsync(System.Collections.Generic.IEnumerable<Serilog.Events.LogEvent> events) -> System.Threading.Tasks.Task
override Serilog.Sinks.AzureTableStorage.AzureBatchingTableStorageWithPropertiesSink.EmitBatchAsync(System.Collections.Generic.IEnumerable<Serilog.Events.LogEvent> events) -> System.Threading.Tasks.Task
override Serilog.Sinks.AzureTableStorage.Sinks.KeyGenerator.PropertiesKeyGenerator.GenerateRowKey(Serilog.Events.LogEvent logEvent, string suffix = null) -> string
Serilog.LoggerConfigurationAzureTableStorageExtensions
Serilog.LoggerConfigurationAzureTableStorageWithPropertiesExtensions
Serilog.Sinks.AzureTableStorage.AzureBatchingTableStorageSink
Serilog.Sinks.AzureTableStorage.AzureBatchingTableStorageSink.AzureBatchingTableStorageSink(Azure.Data.Tables.TableServiceClient storageAccount, Serilog.Formatting.ITextFormatter textFormatter, int batchSizeLimit, System.TimeSpan period, string storageTableName = null, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> void
Serilog.Sinks.AzureTableStorage.AzureBatchingTableStorageSink.AzureBatchingTableStorageSink(Azure.Data.Tables.TableServiceClient storageAccount, Serilog.Formatting.ITextFormatter textFormatter, int batchSizeLimit, System.TimeSpan period, string storageTableName = null, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator = null, bool bypassTableCreationValidation = false, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> void
Serilog.Sinks.AzureTableStorage.AzureBatchingTableStorageWithPropertiesSink
Serilog.Sinks.AzureTableStorage.AzureBatchingTableStorageWithPropertiesSink.AzureBatchingTableStorageWithPropertiesSink(Azure.Data.Tables.TableServiceClient storageAccount, System.IFormatProvider formatProvider, int batchSizeLimit, System.TimeSpan period, string storageTableName = null, string additionalRowKeyPostfix = null, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator = null, string[] propertyColumns = null, bool bypassTableCreationValidation = false, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> void
Serilog.Sinks.AzureTableStorage.AzurePropertyFormatter
Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider
Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider.GetCloudTable(Azure.Data.Tables.TableServiceClient storageAccount, string storageTableName, bool bypassTableCreationValidation) -> Azure.Data.Tables.TableClient
Serilog.Sinks.AzureTableStorage.AzureTableStorageEntityFactory
Serilog.Sinks.AzureTableStorage.AzureTableStorageSink
Serilog.Sinks.AzureTableStorage.AzureTableStorageSink.AzureTableStorageSink(Azure.Data.Tables.TableServiceClient storageAccount, Serilog.Formatting.ITextFormatter textFormatter, string storageTableName = null, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator = null, bool bypassTableCreationValidation = false, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> void
Serilog.Sinks.AzureTableStorage.AzureTableStorageSink.Emit(Serilog.Events.LogEvent logEvent) -> void
Serilog.Sinks.AzureTableStorage.AzureTableStorageWithPropertiesSink
Serilog.Sinks.AzureTableStorage.AzureTableStorageWithPropertiesSink.AzureTableStorageWithPropertiesSink(Azure.Data.Tables.TableServiceClient storageAccount, System.IFormatProvider formatProvider, string storageTableName = null, string additionalRowKeyPostfix = null, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator = null, string[] propertyColumns = null, bool bypassTableCreationValidation = false, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> void
Serilog.Sinks.AzureTableStorage.AzureTableStorageWithPropertiesSink.Emit(Serilog.Events.LogEvent logEvent) -> void
Serilog.Sinks.AzureTableStorage.KeyGenerator.DefaultKeyGenerator
Serilog.Sinks.AzureTableStorage.KeyGenerator.DefaultKeyGenerator.DefaultKeyGenerator() -> void
Serilog.Sinks.AzureTableStorage.KeyGenerator.DefaultKeyGenerator.RowId -> long
Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator
Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator.GeneratePartitionKey(Serilog.Events.LogEvent logEvent) -> string
Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator.GenerateRowKey(Serilog.Events.LogEvent logEvent, string suffix = null) -> string
Serilog.Sinks.AzureTableStorage.LogEventEntity
Serilog.Sinks.AzureTableStorage.LogEventEntity.Data.get -> string
Serilog.Sinks.AzureTableStorage.LogEventEntity.Data.set -> void
Serilog.Sinks.AzureTableStorage.LogEventEntity.ETag.get -> Azure.ETag
Serilog.Sinks.AzureTableStorage.LogEventEntity.ETag.set -> void
Serilog.Sinks.AzureTableStorage.LogEventEntity.Exception.get -> string
Serilog.Sinks.AzureTableStorage.LogEventEntity.Exception.set -> void
Serilog.Sinks.AzureTableStorage.LogEventEntity.Level.get -> string
Serilog.Sinks.AzureTableStorage.LogEventEntity.Level.set -> void
Serilog.Sinks.AzureTableStorage.LogEventEntity.LogEventEntity() -> void
Serilog.Sinks.AzureTableStorage.LogEventEntity.LogEventEntity(Serilog.Events.LogEvent log, Serilog.Formatting.ITextFormatter textFormatter, string partitionKey, string rowKey) -> void
Serilog.Sinks.AzureTableStorage.LogEventEntity.MessageTemplate.get -> string
Serilog.Sinks.AzureTableStorage.LogEventEntity.MessageTemplate.set -> void
Serilog.Sinks.AzureTableStorage.LogEventEntity.PartitionKey.get -> string
Serilog.Sinks.AzureTableStorage.LogEventEntity.PartitionKey.set -> void
Serilog.Sinks.AzureTableStorage.LogEventEntity.RenderedMessage.get -> string
Serilog.Sinks.AzureTableStorage.LogEventEntity.RenderedMessage.set -> void
Serilog.Sinks.AzureTableStorage.LogEventEntity.RowKey.get -> string
Serilog.Sinks.AzureTableStorage.LogEventEntity.RowKey.set -> void
Serilog.Sinks.AzureTableStorage.LogEventEntity.Timestamp.get -> System.DateTimeOffset?
Serilog.Sinks.AzureTableStorage.LogEventEntity.Timestamp.set -> void
Serilog.Sinks.AzureTableStorage.ObjectNaming
Serilog.Sinks.AzureTableStorage.Sinks.KeyGenerator.PropertiesKeyGenerator
Serilog.Sinks.AzureTableStorage.Sinks.KeyGenerator.PropertiesKeyGenerator.PropertiesKeyGenerator() -> void
Serilog.Sinks.AzureTableStorage.TaskExtensions
static readonly Serilog.LoggerConfigurationAzureTableStorageExtensions.DefaultPeriod -> System.TimeSpan
static readonly Serilog.LoggerConfigurationAzureTableStorageWithPropertiesExtensions.DefaultPeriod -> System.TimeSpan
static readonly Serilog.Sinks.AzureTableStorage.ObjectNaming.KeyFieldValueCharactersNotAllowedMatch -> System.Text.RegularExpressions.Regex
static Serilog.LoggerConfigurationAzureTableStorageExtensions.AzureTableStorage(this Serilog.Configuration.LoggerSinkConfiguration loggerConfiguration, Azure.Data.Tables.TableServiceClient storageAccount, Serilog.Events.LogEventLevel restrictedToMinimumLevel = Serilog.Events.LogEventLevel.Verbose, System.IFormatProvider formatProvider = null, string storageTableName = null, bool writeInBatches = false, System.TimeSpan? period = null, int? batchPostingLimit = null, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator = null, bool bypassTableCreationValidation = false, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> Serilog.LoggerConfiguration
static Serilog.LoggerConfigurationAzureTableStorageExtensions.AzureTableStorage(this Serilog.Configuration.LoggerSinkConfiguration loggerConfiguration, Serilog.Formatting.ITextFormatter formatter, Azure.Data.Tables.TableServiceClient storageAccount, Serilog.Events.LogEventLevel restrictedToMinimumLevel = Serilog.Events.LogEventLevel.Verbose, string storageTableName = null, bool writeInBatches = false, System.TimeSpan? period = null, int? batchPostingLimit = null, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator = null, bool bypassTableCreationValidation = false, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> Serilog.LoggerConfiguration
static Serilog.LoggerConfigurationAzureTableStorageExtensions.AzureTableStorage(this Serilog.Configuration.LoggerSinkConfiguration loggerConfiguration, Serilog.Formatting.ITextFormatter formatter, string connectionString, Serilog.Events.LogEventLevel restrictedToMinimumLevel = Serilog.Events.LogEventLevel.Verbose, string storageTableName = null, bool writeInBatches = false, System.TimeSpan? period = null, int? batchPostingLimit = null, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator = null, bool bypassTableCreationValidation = false, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> Serilog.LoggerConfiguration
static Serilog.LoggerConfigurationAzureTableStorageExtensions.AzureTableStorage(this Serilog.Configuration.LoggerSinkConfiguration loggerConfiguration, Serilog.Formatting.ITextFormatter formatter, string sharedAccessSignature, string accountName, System.Uri tableEndpoint = null, Serilog.Events.LogEventLevel restrictedToMinimumLevel = Serilog.Events.LogEventLevel.Verbose, string storageTableName = null, bool writeInBatches = false, System.TimeSpan? period = null, int? batchPostingLimit = null, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator = null, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> Serilog.LoggerConfiguration
static Serilog.LoggerConfigurationAzureTableStorageExtensions.AzureTableStorage(this Serilog.Configuration.LoggerSinkConfiguration loggerConfiguration, string connectionString, Serilog.Events.LogEventLevel restrictedToMinimumLevel = Serilog.Events.LogEventLevel.Verbose, System.IFormatProvider formatProvider = null, string storageTableName = null, bool writeInBatches = false, System.TimeSpan? period = null, int? batchPostingLimit = null, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator = null, bool bypassTableCreationValidation = false, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> Serilog.LoggerConfiguration
static Serilog.LoggerConfigurationAzureTableStorageExtensions.AzureTableStorage(this Serilog.Configuration.LoggerSinkConfiguration loggerConfiguration, string sharedAccessSignature, string accountName, System.Uri tableEndpoint = null, Serilog.Events.LogEventLevel restrictedToMinimumLevel = Serilog.Events.LogEventLevel.Verbose, System.IFormatProvider formatProvider = null, string storageTableName = null, bool writeInBatches = false, System.TimeSpan? period = null, int? batchPostingLimit = null, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator = null, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> Serilog.LoggerConfiguration
static Serilog.LoggerConfigurationAzureTableStorageWithPropertiesExtensions.AzureTableStorageWithProperties(this Serilog.Configuration.LoggerSinkConfiguration loggerConfiguration, Azure.Data.Tables.TableServiceClient storageAccount, Serilog.Events.LogEventLevel restrictedToMinimumLevel = Serilog.Events.LogEventLevel.Verbose, System.IFormatProvider formatProvider = null, string storageTableName = null, bool writeInBatches = false, System.TimeSpan? period = null, int? batchPostingLimit = null, string additionalRowKeyPostfix = null, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator = null, string[] propertyColumns = null, bool bypassTableCreationValidation = false, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> Serilog.LoggerConfiguration
static Serilog.LoggerConfigurationAzureTableStorageWithPropertiesExtensions.AzureTableStorageWithProperties(this Serilog.Configuration.LoggerSinkConfiguration loggerConfiguration, string connectionString, Serilog.Events.LogEventLevel restrictedToMinimumLevel = Serilog.Events.LogEventLevel.Verbose, System.IFormatProvider formatProvider = null, string storageTableName = null, bool writeInBatches = false, System.TimeSpan? period = null, int? batchPostingLimit = null, string additionalRowKeyPostfix = null, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator = null, string[] propertyColumns = null, bool bypassTableCreationValidation = false, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> Serilog.LoggerConfiguration
static Serilog.LoggerConfigurationAzureTableStorageWithPropertiesExtensions.AzureTableStorageWithProperties(this Serilog.Configuration.LoggerSinkConfiguration loggerConfiguration, string sharedAccessSignature, string accountName, System.Uri tableEndpoint = null, Serilog.Events.LogEventLevel restrictedToMinimumLevel = Serilog.Events.LogEventLevel.Verbose, System.IFormatProvider formatProvider = null, string storageTableName = null, bool writeInBatches = false, System.TimeSpan? period = null, int? batchPostingLimit = null, string additionalRowKeyPostfix = null, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator = null, string[] propertyColumns = null, Serilog.Sinks.AzureTableStorage.AzureTableProvider.ICloudTableProvider cloudTableProvider = null) -> Serilog.LoggerConfiguration
static Serilog.Sinks.AzureTableStorage.AzurePropertyFormatter.ToEntityProperty(Serilog.Events.LogEventPropertyValue value, string format = null, System.IFormatProvider formatProvider = null) -> object
static Serilog.Sinks.AzureTableStorage.AzureTableStorageEntityFactory.CreateEntityWithProperties(Serilog.Events.LogEvent logEvent, System.IFormatProvider formatProvider, string additionalRowKeyPostfix, Serilog.Sinks.AzureTableStorage.KeyGenerator.IKeyGenerator keyGenerator, string[] propertyColumns = null) -> Azure.Data.Tables.TableEntity
static Serilog.Sinks.AzureTableStorage.LogEventEntity.GetValidRowKey(string rowKey) -> string
static Serilog.Sinks.AzureTableStorage.ObjectNaming.GetValidKeyValue(string keyValue) -> string
static Serilog.Sinks.AzureTableStorage.Sinks.KeyGenerator.PropertiesKeyGenerator.GetValidStringForTableKey(string s) -> string
static Serilog.Sinks.AzureTableStorage.TaskExtensions.SyncContextSafeWait(this System.Threading.Tasks.Task task, int timeout = -1) -> bool
static Serilog.Sinks.AzureTableStorage.TaskExtensions.SyncContextSafeWait<T>(this System.Threading.Tasks.Task<T> task, int timeout = -1) -> T
virtual Serilog.Sinks.AzureTableStorage.KeyGenerator.DefaultKeyGenerator.GeneratePartitionKey(Serilog.Events.LogEvent logEvent) -> string
virtual Serilog.Sinks.AzureTableStorage.KeyGenerator.DefaultKeyGenerator.GenerateRowKey(Serilog.Events.LogEvent logEvent, string suffix = null) -> string
